<?php

/**
 * Implementation of hook_theme().
 */
function embed_image_theme($existing, $type, $theme, $path) {
    return array(
		'embed_image' => array(
			'variables' => array(
				'uri' => NULL,
				'alt' => NULL,
				'title' => NULL,
			),
			'template' => 'templates/embed_image'
		),
		'embed_fancybox' => array(
			'variables' => array(
				'uri' => NULL,
				'title' => NULL,
				'group' => NULL,
				'img_markup' => NULL,
			),
			'template' => 'templates/embed_fancybox'
		),
		'embed_metadata' => array(
			'variables' => array(
				'image_meta' => NULL,
			),
			'template' => 'templates/embed_metadata'
		),
		'embed_pinterest' => array(
			'variables' => array(
				'uri' => NULL,
				'title' => NULL,
			),
			'template' => 'templates/embed_pinterest'
		),
		'embed_image_wrapper' => array(
			'variables' => array(
				'img_markup' => NULL,
				'meta_markup' => NULL,
			),
			'template' => 'templates/embed_image_wrapper'
		),
		'embed_images_wrapper' => array(
			'variables' => array(
				'image_count' => NULL,
				'imgs_markup' => NULL,
			),
			'template' => 'templates/embed_images_wrapper'
		),
		'embed_panorama_image_wrapper' => array(
			'variables' => array(
				'image_count' => NULL,
				'imgs_markup' => NULL,
			),
			'template' => 'templates/embed_panorama_image_wrapper'
		),
    );
}

/**
 * Implementation of hook_node_view().
 */
function embed_image_node_view($node, $view_mode) {
	// Grab field dedicated for images to embed
	$embed_field = variable_get('embed_field_' . $node->type, 0);

	// If this content type has an images field set for embedding, and the node has a body, see if we can embed images
	if (isset($embed_field) && isset($node->content['body'])) {
		$text = $node->content['body'][0]['#markup'];

		// Add CSS
		drupal_add_css(drupal_get_path('module', 'embed_image') . '/embed_image.css');

		// Grab embed image field settings
		$settings = array();
		$settings['fancybox'] = variable_get('embed_fancybox_' . $node->type, NULL);
		$settings['metadata'] = variable_get('embed_metadata_' . $node->type, NULL);
		$settings['pinterest'] = variable_get('embed_pinterest_' . $node->type, NULL);

		// Grab node images
		$node_images = field_get_items('node', $node, $embed_field);

		// Grab content
		$text = $node->content['body'][0]['#markup'];

		// Look for embed image matches in the content
		preg_match_all("/(\[image:\d+(:\d+)?\]\h*\n?\h*)+/i", $text, $matches);
		if (sizeof($matches[0])) {
			for ($i=0; $i<sizeof($matches[0]); $i++) {

				preg_match_all("/\[image:(\d+)(:(\d+))?\]/i", $matches[0][$i], $image_matches);
				$processed_images = array();

				for ($j=0; $j<sizeof($image_matches[1]); $j++) {

					$current_images = $node_images;

					if ($image_matches[3][$j]) { // [image:nodeid:imagenumber]
						$node_index = $image_matches[1][$j];

						// If node specified is different than the current node
						if ($node_index != $node->nid) {
							$parent_node = node_load($node_index);

							// Node specified must exist and must be of same content type
							if (isset($parent_node->nid) && $parent_node->type == $node->type) {
								$current_images = field_get_items('node', $parent_node, $embed_field);
								$image_index = $image_matches[3][$j];
							}
						}
					}
					else { // [image:imagenumber]
						$image_index = $image_matches[1][$j];
					}

					// If we have a valid image specified from the embed image code, grab it and process it
					if ($current_images && isset($image_index) && isset($current_images[$image_index-1])) {
						$node_image = $current_images[$image_index-1];
						array_push($processed_images, embed_image_process_image($node->nid, $node_image, $settings));
					}
				}

				if (sizeof($processed_images)) {
					$text = str_replace($matches[0][$i], embed_image_process_images($processed_images), $text);
				}
			}
		}
		else {
			// If no embed image matches were found in the body content, but there are images, append them all to the body
			$processed_images = array();
			foreach ($node_images as $node_image) {
				array_push($processed_images, embed_image_process_image($node->nid, $node_image, $settings));
			}
			if (sizeof($processed_images)) {
				$text .= embed_image_process_images($processed_images);
			}
		}

		$node->content['body'][0]['#markup'] = $text;
		return $node;
	}
}

/**
 * Function to process embed image markup for many images.
 */
function embed_image_process_images($processed_images) {
	$markup = "";
	$image_count = 0;
	$wrapped_images = array();
	// Loop through images, if there's a panorama-style image found, split groups
	foreach ($processed_images as $processed_image) {
		if ($processed_image['aspect_ratio'] == "panorama") {
			$markup .= theme('embed_images_wrapper', array('image_count' => $image_count, 'img_markup' => implode($wrapped_images)));
			$markup .= theme('embed_panorama_image_wrapper', array('img_markup' => $processed_image['markup']));
			$wrapped_images = array();
			$image_count=0;
		}
		else {
			$image_count++;
			array_push($wrapped_images, $processed_image['markup']);
		}
	}
	if (sizeof($wrapped_images)) {
		$markup .= theme('embed_images_wrapper', array('image_count' => $image_count, 'img_markup' => implode($wrapped_images)));
	}
	return $markup;
}

/**
 * Function to process embed image markup.
 */
function embed_image_process_image($node_id, $node_image, $settings) {

    $aspect_ratio = "vertical";
    list($width, $height) = getimagesize($node_image['uri']);
    if (($width / $height) > 2) {
            $aspect_ratio = "panorama";
    }
    else if ($width > $height) {
            $aspect_ratio = "horizontal";
    }

	$img_markup = theme('embed_image', array('uri' => file_create_url($node_image['uri']), 'alt' => $node_image['alt'], 'title' => $node_image['title']));

	if ($settings['fancybox'] && $aspect_ratio != "panorama") {
		$img_markup = theme('embed_fancybox', array('uri' => file_create_url($node_image['uri']), 'title' => $node_image['title'], 'group' => $node_id, 'img_markup' => $img_markup));
	}

	$image_meta = array();

	if ($settings['metadata']) {
		$exif_ifd0 = read_exif_data($node_image['uri'] ,'IFD0' ,0);
		if (isset($exif_ifd0['FocalLength'])) {
			$focal_length = explode("/", $exif_ifd0['FocalLength']);
			$image_meta['focal_length'] = $focal_length[0]."mm";
		}
		if (isset($exif_ifd0['ISOSpeedRatings'])) {
			$image_meta['iso'] = 'ISO '.$exif_ifd0['ISOSpeedRatings'];
		}
		if (isset($exif_ifd0['COMPUTED']) && isset($exif_ifd0['COMPUTED']['ApertureFNumber'])) {
			$image_meta['aperture'] = $exif_ifd0['COMPUTED']['ApertureFNumber'];
		}
		if (isset($exif_ifd0['ExposureTime'])) {
			$image_meta['shutter_speed'] = $exif_ifd0['ExposureTime'];
		}
	}

	$meta_markup = theme('embed_metadata', array('title' => $node_image['title'], 'image_meta' => $image_meta));

	$pinterest_markup = NULL;
	if ($settings['pinterest']) {
		$path = $GLOBALS['base_url'].'/'.drupal_get_path_alias("node/".$node_id);
        $pinterest_markup = theme('embed_pinterest', array('path' => $path, 'uri' => file_create_url($node_image['uri']), 'title' => $node_image['title']));
	}

	return array('aspect_ratio' => $aspect_ratio, 'markup' => theme('embed_image_wrapper', array('img_markup' => $img_markup, 'meta_markup' => $meta_markup, 'pinterest_markup' => $pinterest_markup, 'aspect_ratio' => $aspect_ratio)));
}

/**
 * Implementation of hook_form_alter() on node_type form.
 */
function embed_image_form_node_type_form_alter(&$form, $form_state) {
	if (isset($form['type'])) {

		$field_choices = array('0' => 'No field');
		$node_fields = field_info_instances("node", $form['#node_type']->type);
		foreach ($node_fields as $node_field_title => $node_field) {
			if ($node_field['widget']['type'] == 'image_image') {
				$field_choices[$node_field_title] = $node_field_title;
			}
		}

		$form['embed_image'] = array(
			'#type' => 'fieldset',
			'#title' => t('Embed image'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
			'#group' => 'additional_settings',
		);

		$form['embed_image']['embed_field'] = array(
			'#type' => 'select',
			'#title' => t('Enable embed button'),
			'#default_value' => variable_get('embed_field_' . $form['#node_type']->type, 0),
			'#description' => t('Select the image field to embed images from (must be an \'image\' widget ).'),
			'#options' => $field_choices,
		);

		$form['embed_image']['embed_fancybox'] = array(
			'#type' => 'checkbox',
			'#title' => t('Fancybox'),
			'#default_value' => variable_get('embed_fancybox_' . $form['#node_type']->type, NULL),
			'#description' => t('Wrap images in a Fancybox.'),
		);

		$form['embed_image']['embed_metadata'] = array(
			'#type' => 'checkbox',
			'#title' => t('Photo metadata'),
			'#default_value' => variable_get('embed_metadata_' . $form['#node_type']->type, NULL),
			'#description' => t('Show photo metadata.'),
		);

		$form['embed_image']['embed_pinterest'] = array(
			'#type' => 'checkbox',
			'#title' => t('Pinterest \'pin it\' button'),
			'#default_value' => variable_get('embed_pinterest_' . $form['#node_type']->type, NULL),
			'#description' => t('Show a Pinterest \'pin it\' button by the image.'),
		);
	}
}

/**
 * Implementation of hook_form_alter() on node form.
 */
function embed_image_form_node_form_alter(&$form, $form_state) {
	$field = variable_get('embed_field_' . $form['type']['#value'], 0);
	drupal_add_js(array('embed_image' => array('field' => str_replace("_", "-", $field))), 'setting');
	drupal_add_js(drupal_get_path('module', 'embed_image') . '/embed_image.js');
}

/**
 * Implementation of hook_modernizr_load() on node form.
 */
function embed_image_modernizr_load(&$load = null) {
	$load[] = array(
		'test' => 'Modernizr.touch',
		'yep' => array(drupal_get_path('module', 'embed_image') . '/embed_image_no_fancybox.js'),
	);
	return $load;
}
